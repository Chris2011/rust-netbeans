package com.github.drrb.rust.netbeans.parsing.javacc;

public enum RustTokenKind {

    EOF(RustParserConstants.EOF),
    WHITESPACE(RustParserConstants.WHITESPACE),
    DOC_COMMENT(RustParserConstants.DOC_COMMENT),
    INNER_DOC_COMMENT(RustParserConstants.INNER_DOC_COMMENT),
    LINE_COMMENT(RustParserConstants.LINE_COMMENT),
    BLOCK_COMMENT(RustParserConstants.BLOCK_COMMENT),
    DOC_BLOCK_COMMENT(RustParserConstants.DOC_BLOCK_COMMENT),
    INNER_DOC_BLOCK_COMMENT(RustParserConstants.INNER_DOC_BLOCK_COMMENT),
    NON_NULL(RustParserConstants.NON_NULL),
    NON_SINGLE_QUOTE(RustParserConstants.NON_SINGLE_QUOTE),
    NON_DOUBLE_QUOTE(RustParserConstants.NON_DOUBLE_QUOTE),
    NON_EOL(RustParserConstants.NON_EOL),
    ASCII(RustParserConstants.ASCII),
    ASCII_NON_EOL(RustParserConstants.ASCII_NON_EOL),
    ASCII_NON_SINGLE_QUOTE(RustParserConstants.ASCII_NON_SINGLE_QUOTE),
    ASCII_NON_DOUBLE_QUOTE(RustParserConstants.ASCII_NON_DOUBLE_QUOTE),
    STRING_LITERAL(RustParserConstants.STRING_LITERAL),
    RAW_STRING_LITERAL(RustParserConstants.RAW_STRING_LITERAL),
    CHAR_LITERAL(RustParserConstants.CHAR_LITERAL),
    NUMBER_LITERAL(RustParserConstants.NUMBER_LITERAL),
    BYTE_LITERAL(RustParserConstants.BYTE_LITERAL),
    BYTE_STRING_LITERAL(RustParserConstants.BYTE_STRING_LITERAL),
    RAW_BYTE_STRING_LITERAL(RustParserConstants.RAW_BYTE_STRING_LITERAL),
    STRING_BODY(RustParserConstants.STRING_BODY),
    CHAR_BODY(RustParserConstants.CHAR_BODY),
    BYTE_BODY(RustParserConstants.BYTE_BODY),
    COMMON_ESCAPE(RustParserConstants.COMMON_ESCAPE),
    UNICODE_ESCAPE(RustParserConstants.UNICODE_ESCAPE),
    FLOAT_SUFFIX(RustParserConstants.FLOAT_SUFFIX),
    EXPONENT(RustParserConstants.EXPONENT),
    DEC_LIT(RustParserConstants.DEC_LIT),
    HEX_DIGIT(RustParserConstants.HEX_DIGIT),
    OCT_DIGIT(RustParserConstants.OCT_DIGIT),
    DEC_DIGIT(RustParserConstants.DEC_DIGIT),
    NONZERO_DEC(RustParserConstants.NONZERO_DEC),
    RAW_STRING_LITERAL_3(RustParserConstants.RAW_STRING_LITERAL_3),
    RAW_STRING_LITERAL_2(RustParserConstants.RAW_STRING_LITERAL_2),
    RAW_STRING_LITERAL_1(RustParserConstants.RAW_STRING_LITERAL_1),
    RAW_STRING_LITERAL_0(RustParserConstants.RAW_STRING_LITERAL_0),
    RAW_BYTE_STRING_LITERAL_3(RustParserConstants.RAW_BYTE_STRING_LITERAL_3),
    RAW_BYTE_STRING_LITERAL_2(RustParserConstants.RAW_BYTE_STRING_LITERAL_2),
    RAW_BYTE_STRING_LITERAL_1(RustParserConstants.RAW_BYTE_STRING_LITERAL_1),
    RAW_BYTE_STRING_LITERAL_0(RustParserConstants.RAW_BYTE_STRING_LITERAL_0),
    DOUBLE_COLON(RustParserConstants.DOUBLE_COLON),
    ARROW(RustParserConstants.ARROW),
    DOUBLE_ARROW(RustParserConstants.DOUBLE_ARROW),
    HASH(RustParserConstants.HASH),
    LEFT_BRACKET(RustParserConstants.LEFT_BRACKET),
    RIGHT_BRACKET(RustParserConstants.RIGHT_BRACKET),
    LEFT_PAREN(RustParserConstants.LEFT_PAREN),
    RIGHT_PAREN(RustParserConstants.RIGHT_PAREN),
    LEFT_BRACE(RustParserConstants.LEFT_BRACE),
    RIGHT_BRACE(RustParserConstants.RIGHT_BRACE),
    COMMA(RustParserConstants.COMMA),
    COLON(RustParserConstants.COLON),
    PLUS(RustParserConstants.PLUS),
    DASH(RustParserConstants.DASH),
    STAR(RustParserConstants.STAR),
    FORWARD_SLASH(RustParserConstants.FORWARD_SLASH),
    PERCENT(RustParserConstants.PERCENT),
    AMPERSAND(RustParserConstants.AMPERSAND),
    PIPE(RustParserConstants.PIPE),
    HAT(RustParserConstants.HAT),
    DOUBLE_AMPERSAND(RustParserConstants.DOUBLE_AMPERSAND),
    DOUBLE_PIPE(RustParserConstants.DOUBLE_PIPE),
    LEFT_ANGLE_BRACKET(RustParserConstants.LEFT_ANGLE_BRACKET),
    RIGHT_ANGLE_BRACKET(RustParserConstants.RIGHT_ANGLE_BRACKET),
    SHIFT_LEFT(RustParserConstants.SHIFT_LEFT),
    SHIFT_RIGHT(RustParserConstants.SHIFT_RIGHT),
    LESS_THAN_EQUAL(RustParserConstants.LESS_THAN_EQUAL),
    GREATER_THAN_EQUAL(RustParserConstants.GREATER_THAN_EQUAL),
    SEMICOLON(RustParserConstants.SEMICOLON),
    DOUBLE_EQUALS(RustParserConstants.DOUBLE_EQUALS),
    NOT_EQUAL(RustParserConstants.NOT_EQUAL),
    PLUS_EQUALS(RustParserConstants.PLUS_EQUALS),
    MINUS_EQUALS(RustParserConstants.MINUS_EQUALS),
    TIMES_EQUALS(RustParserConstants.TIMES_EQUALS),
    DIVIDE_EQUALS(RustParserConstants.DIVIDE_EQUALS),
    MOD_EQUALS(RustParserConstants.MOD_EQUALS),
    AND_EQUALS(RustParserConstants.AND_EQUALS),
    OR_EQUALS(RustParserConstants.OR_EQUALS),
    XOR_EQUALS(RustParserConstants.XOR_EQUALS),
    SHIFT_LEFT_EQUALS(RustParserConstants.SHIFT_LEFT_EQUALS),
    SHIFT_RIGHT_EQUALS(RustParserConstants.SHIFT_RIGHT_EQUALS),
    BANG(RustParserConstants.BANG),
    EQUALS(RustParserConstants.EQUALS),
    DOT(RustParserConstants.DOT),
    DOUBLE_DOT(RustParserConstants.DOUBLE_DOT),
    DOLLAR(RustParserConstants.DOLLAR),
    HASH_ROCKET(RustParserConstants.HASH_ROCKET),
    ABSTRACT(RustParserConstants.ABSTRACT),
    ALIGNOF(RustParserConstants.ALIGNOF),
    AS(RustParserConstants.AS),
    BECOME(RustParserConstants.BECOME),
    BOX(RustParserConstants.BOX),
    BREAK(RustParserConstants.BREAK),
    CONST(RustParserConstants.CONST),
    CONTINUE(RustParserConstants.CONTINUE),
    CRATE(RustParserConstants.CRATE),
    DO(RustParserConstants.DO),
    ELSE(RustParserConstants.ELSE),
    ENUM(RustParserConstants.ENUM),
    EXTERN(RustParserConstants.EXTERN),
    FALSE(RustParserConstants.FALSE),
    FINAL(RustParserConstants.FINAL),
    FN(RustParserConstants.FN),
    FOR(RustParserConstants.FOR),
    IF(RustParserConstants.IF),
    IMPL(RustParserConstants.IMPL),
    IN(RustParserConstants.IN),
    LET(RustParserConstants.LET),
    LOOP(RustParserConstants.LOOP),
    MACRO(RustParserConstants.MACRO),
    MACRO_RULES(RustParserConstants.MACRO_RULES),
    MATCH(RustParserConstants.MATCH),
    MOD(RustParserConstants.MOD),
    MOVE(RustParserConstants.MOVE),
    MUT(RustParserConstants.MUT),
    OFFSETOF(RustParserConstants.OFFSETOF),
    OVERRIDE(RustParserConstants.OVERRIDE),
    PRIV(RustParserConstants.PRIV),
    PROC(RustParserConstants.PROC),
    PUB(RustParserConstants.PUB),
    PURE(RustParserConstants.PURE),
    REF(RustParserConstants.REF),
    RETURN(RustParserConstants.RETURN),
    BIG_SELF(RustParserConstants.BIG_SELF),
    SELF(RustParserConstants.SELF),
    SIZEOF(RustParserConstants.SIZEOF),
    STATIC(RustParserConstants.STATIC),
    STRUCT(RustParserConstants.STRUCT),
    SUPER(RustParserConstants.SUPER),
    TRAIT(RustParserConstants.TRAIT),
    TRUE(RustParserConstants.TRUE),
    TYPE(RustParserConstants.TYPE),
    TYPEOF(RustParserConstants.TYPEOF),
    UNSAFE(RustParserConstants.UNSAFE),
    UNSIZED(RustParserConstants.UNSIZED),
    USE(RustParserConstants.USE),
    VIRTUAL(RustParserConstants.VIRTUAL),
    WHERE(RustParserConstants.WHERE),
    WHILE(RustParserConstants.WHILE),
    YIELD(RustParserConstants.YIELD),
    IDENTIFIER(RustParserConstants.IDENTIFIER),
    LABEL(RustParserConstants.LABEL),
    XID_start(RustParserConstants.XID_start),
    XID_continue(RustParserConstants.XID_continue),
    GARBAGE(RustParserConstants.GARBAGE);

    private static final RustTokenKind[] LOOKUP;
    static {
        int highestValue = 0;
        for (RustTokenKind kind : values()) {
            highestValue = highestValue > kind.javaccKind ? highestValue : kind.javaccKind;
        }
        LOOKUP = new RustTokenKind[highestValue + 1];
        for (RustTokenKind kind : values()) {
            LOOKUP[kind.javaccKind] = kind;
        }
    }

    private final int javaccKind;

    RustTokenKind(int javaccKind) {
        this.javaccKind = javaccKind;
    }

    public static RustTokenKind get(int javaccKind) {
        RustTokenKind kind = LOOKUP[javaccKind];
        if (kind == null) {
            throw new IllegalArgumentException("No TokenKind for constant: " + javaccKind);
        }
        return kind;
    }
}
