/**
 * Copyright (C) 2015 drrb
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.github.drrb.rust.netbeans.configuration;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import org.openide.util.NbPreferences;

final class RustPanel extends javax.swing.JPanel {

    private final RustOptionsPanelController controller;

    RustPanel(RustOptionsPanelController ctrl) {
        this.controller = ctrl;
        initComponents();
        rustcPathField.addActionListener(new ChangeListener());
        cargoPathField.addActionListener(new ChangeListener());
        libraryPathField.addActionListener(new ChangeListener());
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rustcPathLabel = new javax.swing.JLabel();
        cargoPathLabel = new javax.swing.JLabel();
        libraryPathLabel = new javax.swing.JLabel();
        rustcPathField = new javax.swing.JTextField();
        cargoPathField = new javax.swing.JTextField();
        libraryPathField = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(rustcPathLabel, org.openide.util.NbBundle.getMessage(RustPanel.class, "RustPanel.rustcPathLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(cargoPathLabel, org.openide.util.NbBundle.getMessage(RustPanel.class, "RustPanel.cargoPathLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(libraryPathLabel, org.openide.util.NbBundle.getMessage(RustPanel.class, "RustPanel.libraryPathLabel.text")); // NOI18N

        rustcPathField.setText(org.openide.util.NbBundle.getMessage(RustPanel.class, "RustPanel.rustcPathField.text")); // NOI18N

        cargoPathField.setText(org.openide.util.NbBundle.getMessage(RustPanel.class, "RustPanel.cargoPathField.text")); // NOI18N

        libraryPathField.setText(org.openide.util.NbBundle.getMessage(RustPanel.class, "RustPanel.libraryPathField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(libraryPathLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(libraryPathField, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cargoPathLabel)
                        .addGap(18, 18, 18)
                        .addComponent(cargoPathField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rustcPathLabel)
                        .addGap(18, 18, 18)
                        .addComponent(rustcPathField)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rustcPathLabel)
                    .addComponent(rustcPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cargoPathLabel)
                    .addComponent(cargoPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(libraryPathLabel)
                    .addComponent(libraryPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(298, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        rustcPathField.setText(NbPreferences.forModule(RustPanel.class).get("rustcPath", ""));
        cargoPathField.setText(NbPreferences.forModule(RustPanel.class).get("cargoPath", ""));
        libraryPathField.setText(NbPreferences.forModule(RustPanel.class).get("libraryPath", ""));
        // TODO read settings and initialize GUI
        // Example:
        // someCheckBox.setSelected(Preferences.userNodeForPackage(RustPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(RustPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
    }

    void store() {
        NbPreferences.forModule(RustPanel.class).put("rustcPath", rustcPathField.getText());
        NbPreferences.forModule(RustPanel.class).put("cargoPath", cargoPathField.getText());
        NbPreferences.forModule(RustPanel.class).put("libraryPath", libraryPathField.getText());
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(RustPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(RustPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cargoPathField;
    private javax.swing.JLabel cargoPathLabel;
    private javax.swing.JTextField libraryPathField;
    private javax.swing.JLabel libraryPathLabel;
    private javax.swing.JTextField rustcPathField;
    private javax.swing.JLabel rustcPathLabel;
    // End of variables declaration//GEN-END:variables

    private class ChangeListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            controller.changed();
        }
    }
}
